{
  "id": "java/ReturnsPassword",
  "name": "ReturnsPassword",
  "shortDescription": {
    "text": "Unprotected Storage of Credentials"
  },
  "defaultConfiguration": {
    "level": "warning"
  },
  "help": {
    "markdown": "## Details\n\nIf credentials are not protected or not sufficiently protected through strong encryption, attackers can access this information in a number of ways. Developers may rely on plain-text storage of credentials when they believe the system is completely secure from attack or only accessible to insiders. This confidence is misguided and dangerous. If a malicious insider-such as a former employee-or a hostile attacker using SQL injection, XML injection, or a brute-force attack accesses the system, they can access this credential information to gain unauthorized permissions within the system and to export other confidential and secure information.\n\n## Best practices for prevention\n* Ensure that passwords are never stored in plain text, even for \"purely internal\" use.\n* Never rely on password encoding, such as base 64 encoding; choose a complex encryption algorithm that includes salting, then hashing.\n* Implement zero-trust approaches in which users have access only to information needed for legitimate business purposes.\n* To the greatest extent possible, secure the application against injection attacks and other types of weaknesses.",
    "text": ""
  },
  "properties": {
    "tags": [
      "java",
      "ReturnsPassword",
      "Security"
    ],
    "categories": [
      "Security"
    ],
    "exampleCommitFixes": [
      {
        "commitURL": "https://github.com/ShotaOd/carbon/commit/4562a7a2c0f27065ed63c7615f044423ad1701fd?diff=split#diff-5a57acf4efafddf23331cc9f3c8d724e1cdd01633f61aa2d4e680b9b5241ff71L-1",
        "lines": [
          {
            "line": "import org.mindrot.jbcrypt.BCrypt;\n",
            "lineNumber": 6,
            "lineChange": "added"
          },
          {
            "line": "\n",
            "lineNumber": 7,
            "lineChange": "none"
          },
          {
            "line": "/**\n",
            "lineNumber": 8,
            "lineChange": "none"
          },
          {
            "line": " * @author Shota Oda 2016/11/23.\n",
            "lineNumber": 9,
            "lineChange": "none"
          },
          {
            "line": " */\n",
            "lineNumber": 10,
            "lineChange": "none"
          },
          {
            "line": "@Data\n",
            "lineNumber": 11,
            "lineChange": "none"
          },
          {
            "line": "@AllArgsConstructor\n",
            "lineNumber": 12,
            "lineChange": "none"
          },
          {
            "line": "public class BusinessAuthIdentity implements AuthIdentity{\n",
            "lineNumber": 13,
            "lineChange": "none"
          },
          {
            "line": "\n",
            "lineNumber": 14,
            "lineChange": "none"
          },
          {
            "line": "\tprivate Lecturer user;\n",
            "lineNumber": 15,
            "lineChange": "none"
          },
          {
            "line": "\n",
            "lineNumber": 16,
            "lineChange": "none"
          },
          {
            "line": "\t@Override\n",
            "lineNumber": 17,
            "lineChange": "none"
          },
          {
            "line": "\tpublic String username() {\n",
            "lineNumber": 18,
            "lineChange": "none"
          },
          {
            "line": "\t\treturn user.getUsername();\n",
            "lineNumber": 19,
            "lineChange": "none"
          },
          {
            "line": "\t}\n",
            "lineNumber": 20,
            "lineChange": "none"
          },
          {
            "line": "\n",
            "lineNumber": 21,
            "lineChange": "none"
          },
          {
            "line": "\t@Override\n",
            "lineNumber": 22,
            "lineChange": "none"
          },
          {
            "line": "\tpublic String cryptPassword() {\n",
            "lineNumber": 23,
            "lineChange": "none"
          },
          {
            "line": "\t\treturn user.getPassword();\n",
            "lineNumber": 24,
            "lineChange": "none"
          },
          {
            "line": "\t}\n",
            "lineNumber": 25,
            "lineChange": "none"
          },
          {
            "line": "\n",
            "lineNumber": 26,
            "lineChange": "none"
          },
          {
            "line": "\t@Override\n",
            "lineNumber": 27,
            "lineChange": "none"
          },
          {
            "line": "\tpublic boolean confirm(String plainPassword) {\n",
            "lineNumber": 28,
            "lineChange": "none"
          },
          {
            "line": "\t\treturn cryptPassword().equals(plainPassword);\n",
            "lineNumber": 28,
            "lineChange": "removed"
          },
          {
            "line": "        return BCrypt.checkpw(plainPassword, cryptPassword());\n",
            "lineNumber": 29,
            "lineChange": "added"
          }
        ]
      },
      {
        "commitURL": "https://github.com/ShotaOd/carbon/commit/4562a7a2c0f27065ed63c7615f044423ad1701fd?diff=split#diff-52010d754aef2fbde5a21bb6e6002096c329060b69306e842cd24a31129752b1L-1",
        "lines": [
          {
            "line": "import org.mindrot.jbcrypt.BCrypt;\n",
            "lineNumber": 6,
            "lineChange": "added"
          },
          {
            "line": "\n",
            "lineNumber": 7,
            "lineChange": "none"
          },
          {
            "line": "/**\n",
            "lineNumber": 8,
            "lineChange": "none"
          },
          {
            "line": " * @author Shota Oda 2016/11/23.\n",
            "lineNumber": 9,
            "lineChange": "none"
          },
          {
            "line": " */\n",
            "lineNumber": 10,
            "lineChange": "none"
          },
          {
            "line": "@Data\n",
            "lineNumber": 11,
            "lineChange": "none"
          },
          {
            "line": "@AllArgsConstructor\n",
            "lineNumber": 12,
            "lineChange": "none"
          },
          {
            "line": "public class ConsumerAuthIdentity implements AuthIdentity{\n",
            "lineNumber": 13,
            "lineChange": "none"
          },
          {
            "line": "\n",
            "lineNumber": 14,
            "lineChange": "none"
          },
          {
            "line": "\tprivate Student student;\n",
            "lineNumber": 15,
            "lineChange": "none"
          },
          {
            "line": "\n",
            "lineNumber": 16,
            "lineChange": "none"
          },
          {
            "line": "\t@Override\n",
            "lineNumber": 17,
            "lineChange": "none"
          },
          {
            "line": "\tpublic String username() {\n",
            "lineNumber": 18,
            "lineChange": "none"
          },
          {
            "line": "\t\treturn student.getUsername();\n",
            "lineNumber": 19,
            "lineChange": "none"
          },
          {
            "line": "\t}\n",
            "lineNumber": 20,
            "lineChange": "none"
          },
          {
            "line": "\n",
            "lineNumber": 21,
            "lineChange": "none"
          },
          {
            "line": "\t@Override\n",
            "lineNumber": 22,
            "lineChange": "none"
          },
          {
            "line": "\tpublic String cryptPassword() {\n",
            "lineNumber": 23,
            "lineChange": "none"
          },
          {
            "line": "\t\treturn student.getPassword();\n",
            "lineNumber": 24,
            "lineChange": "none"
          },
          {
            "line": "\t}\n",
            "lineNumber": 25,
            "lineChange": "none"
          },
          {
            "line": "\n",
            "lineNumber": 26,
            "lineChange": "none"
          },
          {
            "line": "\t@Override\n",
            "lineNumber": 27,
            "lineChange": "none"
          },
          {
            "line": "\tpublic boolean confirm(String plainPassword) {\n",
            "lineNumber": 28,
            "lineChange": "none"
          },
          {
            "line": "\t\treturn cryptPassword().equals(plainPassword);\n",
            "lineNumber": 28,
            "lineChange": "removed"
          },
          {
            "line": "\t\treturn BCrypt.checkpw(plainPassword, cryptPassword());\n",
            "lineNumber": 29,
            "lineChange": "added"
          }
        ]
      },
      {
        "commitURL": "https://github.com/SeraphJACK/SimpleLogin/commit/ff6715f90b9a3e00f7201618ff2f4986c5ebc0f5?diff=split#diff-c79ff75898e7300d5901fce735e57a03db459d401284e7c67ec4711d5adebba4L-1",
        "lines": [
          {
            "line": "import org.mindrot.jbcrypt.BCrypt;\n",
            "lineNumber": 4,
            "lineChange": "added"
          },
          {
            "line": "import top.seraphjack.simplelogin.SLConfig;\n",
            "lineNumber": 5,
            "lineChange": "none"
          },
          {
            "line": "import top.seraphjack.simplelogin.SimpleLogin;\n",
            "lineNumber": 6,
            "lineChange": "none"
          },
          {
            "line": "\n",
            "lineNumber": 7,
            "lineChange": "none"
          },
          {
            "line": "import javax.annotation.concurrent.NotThreadSafe;\n",
            "lineNumber": 8,
            "lineChange": "none"
          },
          {
            "line": "import java.io.IOException;\n",
            "lineNumber": 9,
            "lineChange": "none"
          },
          {
            "line": "import java.nio.charset.StandardCharsets;\n",
            "lineNumber": 10,
            "lineChange": "none"
          },
          {
            "line": "import java.nio.file.Files;\n",
            "lineNumber": 11,
            "lineChange": "none"
          },
          {
            "line": "import java.nio.file.Path;\n",
            "lineNumber": 12,
            "lineChange": "none"
          },
          {
            "line": "import java.nio.file.StandardOpenOption;\n",
            "lineNumber": 13,
            "lineChange": "none"
          },
          {
            "line": "import java.util.Arrays;\n",
            "lineNumber": 14,
            "lineChange": "none"
          },
          {
            "line": "import java.util.HashMap;\n",
            "lineNumber": 15,
            "lineChange": "none"
          },
          {
            "line": "import java.util.Map;\n",
            "lineNumber": 16,
            "lineChange": "none"
          },
          {
            "line": "\n",
            "lineNumber": 17,
            "lineChange": "none"
          },
          {
            "line": "@NotThreadSafe\n",
            "lineNumber": 18,
            "lineChange": "none"
          },
          {
            "line": "public class StorageProviderFile implements StorageProvider {\n",
            "lineNumber": 19,
            "lineChange": "none"
          },
          {
            "line": "    private Gson gson;\n",
            "lineNumber": 20,
            "lineChange": "none"
          },
          {
            "line": "    private Path path;\n",
            "lineNumber": 21,
            "lineChange": "none"
          },
          {
            "line": "    private Map<String, POJOUserEntry> entries;\n",
            "lineNumber": 22,
            "lineChange": "none"
          },
          {
            "line": "    private boolean dirty = false;\n",
            "lineNumber": 23,
            "lineChange": "none"
          },
          {
            "line": "\n",
            "lineNumber": 24,
            "lineChange": "none"
          },
          {
            "line": "    StorageProviderFile(Path path) throws IOException {\n",
            "lineNumber": 24,
            "lineChange": "none"
          },
          {
            "line": "        this.path = path;\n",
            "lineNumber": 26,
            "lineChange": "none"
          },
          {
            "line": "        this.gson = new Gson();\n",
            "lineNumber": 27,
            "lineChange": "none"
          },
          {
            "line": "\n",
            "lineNumber": 28,
            "lineChange": "none"
          },
          {
            "line": "        if (Files.exists(path)) {\n",
            "lineNumber": 29,
            "lineChange": "none"
          },
          {
            "line": "            entries = new HashMap<>();\n",
            "lineNumber": 30,
            "lineChange": "none"
          },
          {
            "line": "            Arrays.stream(gson.fromJson(new String(Files.readAllBytes(path), StandardCharsets.UTF_8), POJOUserEntry[].class)).forEach(e -> entries.put(e.username, e));\n",
            "lineNumber": 31,
            "lineChange": "none"
          },
          {
            "line": "        } else {\n",
            "lineNumber": 32,
            "lineChange": "none"
          },
          {
            "line": "            if (!Files.exists(path.getParent())) {\n",
            "lineNumber": 33,
            "lineChange": "none"
          },
          {
            "line": "                Files.createDirectories(path.getParent());\n",
            "lineNumber": 34,
            "lineChange": "none"
          },
          {
            "line": "            }\n",
            "lineNumber": 35,
            "lineChange": "none"
          },
          {
            "line": "            entries = new HashMap<>();\n",
            "lineNumber": 36,
            "lineChange": "none"
          },
          {
            "line": "            Files.createFile(path);\n",
            "lineNumber": 37,
            "lineChange": "none"
          },
          {
            "line": "        }\n",
            "lineNumber": 38,
            "lineChange": "none"
          },
          {
            "line": "    }\n",
            "lineNumber": 39,
            "lineChange": "none"
          },
          {
            "line": "\n",
            "lineNumber": 40,
            "lineChange": "none"
          },
          {
            "line": "    @Override\n",
            "lineNumber": 41,
            "lineChange": "none"
          },
          {
            "line": "    public boolean checkPassword(String username, String password) {\n",
            "lineNumber": 42,
            "lineChange": "none"
          },
          {
            "line": "        if (entries.containsKey(username)) {\n",
            "lineNumber": 43,
            "lineChange": "none"
          },
          {
            "line": "            return entries.get(username).password.equals(password);\n",
            "lineNumber": 43,
            "lineChange": "removed"
          },
          {
            "line": "            return BCrypt.checkpw(password, entries.get(username).password);\n",
            "lineNumber": 44,
            "lineChange": "added"
          }
        ]
      }
    ],
    "exampleCommitDescriptions": [],
    "precision": "very-high",
    "repoDatasetSize": 2,
    "cwe": [
      "CWE-256"
    ]
  }
}
