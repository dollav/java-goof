{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "python/Ssrf",
              "name": "Ssrf",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "Ssrf",
                  "Security",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ARM-software/vulkan_best_practice_for_mobile_developers/commit/23ad832af741f0354949a72e6c6f799eb9d2bace?diff=split#diff-7efee2ee97af01f846ed5818e84c955c51bd8efe06588e0dfa341c68966d945fL-1",
                    "lines": [
                      {
                        "line": "    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description=\"Downloads and unpacks assets\")\n",
                        "lineNumber": 31,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    parser.add_argument(\"zip_url\", action=\"store\", type=str, help=\"URL of the assets package\")\n",
                        "lineNumber": 32,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    args = parser.parse_args()\n",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    url = \"https://github.com/ARM-software/vulkan_best_practice_for_mobile_developers/releases/download/v1.1.2/scenes.zip\"\n",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        request = requests.get(args.zip_url, stream=True)\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        request = requests.get(url, stream=True)\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/yask123/Instant-Movie-Streamer/commit/0b66df24286da3df144b8874cb40db4c6ddf5c6c?diff=split#diff-92c6c2b7103c0f894cf5a1c09b289b8251c1c260eb20cb9027189a2a0eee5d99L-1",
                    "lines": [
                      {
                        "line": "def get_magnet_link(movie_name = 'harry potter'):\n",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "    URL = 'https://www.skytorrents.in/search/all/ed/1/?q='+movie_name.replace(' ', '+')\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "def get_torrent_url(search_url):\n",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    \"\"\"Grabs the best matched torrent URL from the search results.\"\"\"\n",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    search_request_response = requests.get(search_url, verify=False)\n",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    soup = BeautifulSoup(search_request_response.text, 'html.parser')\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    movie_page = 'https://kat.cr' + (soup.find_all(\"a\", class_=\"cellMainLink\")[0].get('href'))\n",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    resp = requests.get(URL)\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "    soup = BeautifulSoup(resp.text, 'html.parser')\n",
                        "lineNumber": 37,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/hacktoolkit/django-htk/commit/01df728743a36721d7659247a3e3b9907133ffee?diff=split#diff-eec36e337287f60f4a26ec5ed80b77d0234217d0de7dab8846fe3a39048cef9fL-1",
                    "lines": [
                      {
                        "line": "GOOGLE_GEOCODING_API_BASE_URL = 'https://maps.googleapis.com/maps/api/geocode/%(format)s?sensor=%(sensor)s&'\n",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GOOGLE_GEOCODING_API_GEOCODE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'address=%(address)s'\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "GOOGLE_GEOCODING_API_REVERSE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'latlng=%(latlng)s'\n",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from htk.utils import htk_setting\n",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "GOOGLE_GEOCODING_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json'\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "#GOOGLE_GEOCODING_API_BASE_URL = 'https://maps.googleapis.com/maps/api/geocode/%(format)s?sensor=%(sensor)s&'\n",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "#GOOGLE_GEOCODING_API_GEOCODE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'address=%(address)s'\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "#GOOGLE_GEOCODING_API_REVERSE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'latlng=%(latlng)s'\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "class Usage(Exception):\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, msg):\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        self.msg = msg\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "def main(argv = None):\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OPT_STR = 'hgr'\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    OPT_LIST = [\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'help',\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'geocode',\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'resolve',\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ]\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    is_geocode = True\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if argv is None:\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "        argv = sys.argv\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try:\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        try:\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "            progname = argv[0]\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "            opts, args = getopt.getopt(argv[1:],\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                       OPT_STR,\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "                                       OPT_LIST)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "        except getopt.error, msg:\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "             raise Usage(msg)\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        # process options\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "        for o, a in opts:\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if o in ('-h', '--help'):\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "                print __doc__\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "                sys.exit(0)\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif o in ('-g', '--geocode'):\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "                is_geocode = True\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elif o in ('-r', '--resolve'):\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "                is_geocode = False\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if is_geocode and len(args) == 1:\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            address = args[0]\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "            latitude, longitude = get_latlng(address)\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "            print '%s,%s' % (latitude, longitude,)\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        elif not is_geocode and len(args) == 2:\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "            latitude = args[0]\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "            longitude = args[1]\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "            address = reverse_geocode(latitude, longitude)\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "            print address\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "        else:\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            raise Usage('Incorrect arguments')\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "                \n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    except Usage, err:\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        print >> sys.stderr, err.msg\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        print >> sys.stderr, \"for help use --help\"\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return 3.14159\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "def get_latlng(address):\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    address_query = urllib.quote(address, '')\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    values = {\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'format' : 'json',\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "'sensor' : 'false',\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "'address' : address_query,\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    url = GOOGLE_GEOCODING_API_GEOCODE_URL % values\n",
                        "lineNumber": 83,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    response = requests.get(url)\n",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    key = htk_setting('HTK_GOOGLE_GEOCODING_API_KEY', None)\n",
                        "lineNumber": 83,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if key:\n",
                        "lineNumber": 84,
                        "lineChange": "added"
                      },
                      {
                        "line": "        params['key'] = key\n",
                        "lineNumber": 85,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "    response = requests.get(GOOGLE_GEOCODING_API_URL, params=params)\n",
                        "lineNumber": 87,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 4,
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "java/ReturnsPassword",
              "name": "ReturnsPassword",
              "shortDescription": {
                "text": "Unprotected Storage of Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nIf credentials are not protected or not sufficiently protected through strong encryption, attackers can access this information in a number of ways. Developers may rely on plain-text storage of credentials when they believe the system is completely secure from attack or only accessible to insiders. This confidence is misguided and dangerous. If a malicious insider-such as a former employee-or a hostile attacker using SQL injection, XML injection, or a brute-force attack accesses the system, they can access this credential information to gain unauthorized permissions within the system and to export other confidential and secure information.\n\n## Best practices for prevention\n* Ensure that passwords are never stored in plain text, even for \"purely internal\" use.\n* Never rely on password encoding, such as base 64 encoding; choose a complex encryption algorithm that includes salting, then hashing.\n* Implement zero-trust approaches in which users have access only to information needed for legitimate business purposes.\n* To the greatest extent possible, secure the application against injection attacks and other types of weaknesses.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java",
                  "ReturnsPassword",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ShotaOd/carbon/commit/4562a7a2c0f27065ed63c7615f044423ad1701fd?diff=split#diff-5a57acf4efafddf23331cc9f3c8d724e1cdd01633f61aa2d4e680b9b5241ff71L-1",
                    "lines": [
                      {
                        "line": "import org.mindrot.jbcrypt.BCrypt;\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @author Shota Oda 2016/11/23.\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Data\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "@AllArgsConstructor\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class BusinessAuthIdentity implements AuthIdentity{\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate Lecturer user;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Override\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic String username() {\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn user.getUsername();\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Override\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic String cryptPassword() {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn user.getPassword();\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Override\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic boolean confirm(String plainPassword) {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn cryptPassword().equals(plainPassword);\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return BCrypt.checkpw(plainPassword, cryptPassword());\n",
                        "lineNumber": 29,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ShotaOd/carbon/commit/4562a7a2c0f27065ed63c7615f044423ad1701fd?diff=split#diff-52010d754aef2fbde5a21bb6e6002096c329060b69306e842cd24a31129752b1L-1",
                    "lines": [
                      {
                        "line": "import org.mindrot.jbcrypt.BCrypt;\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "/**\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @author Shota Oda 2016/11/23.\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": " */\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Data\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "@AllArgsConstructor\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class ConsumerAuthIdentity implements AuthIdentity{\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tprivate Student student;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Override\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic String username() {\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn student.getUsername();\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Override\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic String cryptPassword() {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn student.getPassword();\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t@Override\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpublic boolean confirm(String plainPassword) {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn cryptPassword().equals(plainPassword);\n",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\treturn BCrypt.checkpw(plainPassword, cryptPassword());\n",
                        "lineNumber": 29,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/SeraphJACK/SimpleLogin/commit/ff6715f90b9a3e00f7201618ff2f4986c5ebc0f5?diff=split#diff-c79ff75898e7300d5901fce735e57a03db459d401284e7c67ec4711d5adebba4L-1",
                    "lines": [
                      {
                        "line": "import org.mindrot.jbcrypt.BCrypt;\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "import top.seraphjack.simplelogin.SLConfig;\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "import top.seraphjack.simplelogin.SimpleLogin;\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "import javax.annotation.concurrent.NotThreadSafe;\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.io.IOException;\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.nio.charset.StandardCharsets;\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.nio.file.Files;\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.nio.file.Path;\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.nio.file.StandardOpenOption;\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Arrays;\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.HashMap;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "import java.util.Map;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "@NotThreadSafe\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "public class StorageProviderFile implements StorageProvider {\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private Gson gson;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private Path path;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private Map<String, POJOUserEntry> entries;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "    private boolean dirty = false;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "    StorageProviderFile(Path path) throws IOException {\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.path = path;\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.gson = new Gson();\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (Files.exists(path)) {\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "            entries = new HashMap<>();\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Arrays.stream(gson.fromJson(new String(Files.readAllBytes(path), StandardCharsets.UTF_8), POJOUserEntry[].class)).forEach(e -> entries.put(e.username, e));\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!Files.exists(path.getParent())) {\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Files.createDirectories(path.getParent());\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "            entries = new HashMap<>();\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "            Files.createFile(path);\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @Override\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public boolean checkPassword(String username, String password) {\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (entries.containsKey(username)) {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return entries.get(username).password.equals(password);\n",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            return BCrypt.checkpw(password, entries.get(username).password);\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 2,
                "cwe": [
                  "CWE-256"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "python/Ssrf",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a command line argument flows into requests.post, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[requests.post](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "todolist-goof/exploits/zip-slip.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c91d074435910f1a76d8677462395e7a7f5317f554c886317059bf72f98d247f",
            "1": "3d071b71.889edeb6.ef7ad415.3456c081.056de048.ba14daf2.081ac3f4.8794408a.a6b41d6e.889edeb6.ef7ad415.edcf1db9.c8b7d5cc.48e1de78.a2237efa.f46ed94e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "todolist-goof/exploits/zip-slip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "todolist-goof/exploits/zip-slip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 8,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "todolist-goof/exploits/zip-slip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 8,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "todolist-goof/exploits/zip-slip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 8,
                            "endColumn": 69
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "todolist-goof/exploits/zip-slip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 7,
                            "endColumn": 97
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "todolist-goof/exploits/zip-slip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 1,
                            "endColumn": 97
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "todolist-goof/exploits/zip-slip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 15,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "todolist-goof/exploits/zip-slip.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 1,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 534,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/ReturnsPassword",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "An attacker might be able to detect the value of the password due to the exposure of comparison timing. When the functions Arrays.equals() or String.equals() are called, they will exit earlier if fewer bytes are matched. Use password encoder such as BCrypt for comparing passwords.",
            "markdown": "An attacker might be able to detect the value of the password due to the exposure of comparison timing. When the functions Arrays.equals() or String.equals() are called, they will exit earlier if fewer bytes are matched. Use password encoder such as BCrypt for comparing passwords.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "todolist-goof/todolist-web-struts/src/main/java/io/github/benas/todolist/web/action/user/AccountAction.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250,
                  "endLine": 250,
                  "startColumn": 17,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "321c85af98d01d74e11fa5dbd45f05d79b2a8850b63a02c1da64df28bfa00cdc",
            "1": "ec2603c1.d33f1a8f.d308627b.9998adc9.dd06b926.349570c1.6ae0062a.02370d47.ec2603c1.d33f1a8f.fc7d5400.9998adc9.dd06b926.349570c1.6ae0062a.02370d47"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "todolist-goof/todolist-web-struts/src/main/java/io/github/benas/todolist/web/action/user/AccountAction.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 250,
                            "endLine": 250,
                            "startColumn": 17,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 617,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "java/ReturnsPassword",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "An attacker might be able to detect the value of the password due to the exposure of comparison timing. When the functions Arrays.equals() or String.equals() are called, they will exit earlier if fewer bytes are matched. Use password encoder such as BCrypt for comparing passwords.",
            "markdown": "An attacker might be able to detect the value of the password due to the exposure of comparison timing. When the functions Arrays.equals() or String.equals() are called, they will exit earlier if fewer bytes are matched. Use password encoder such as BCrypt for comparing passwords.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "todolist-goof/todolist-web-struts/src/main/java/io/github/benas/todolist/web/action/user/AccountAction.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 254,
                  "endLine": 254,
                  "startColumn": 17,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5a6e18b33f52d656e45141c69fb41d4f9763dad06f518bac9d79f375ee50b600",
            "1": "daf8aa0f.ebc140b8.d308627b.9998adc9.dd06b926.31ccdec6.d2f0a140.02370d47.daf8aa0f.ebc140b8.fc7d5400.9998adc9.dd06b926.31ccdec6.d2f0a140.02370d47"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "todolist-goof/todolist-web-struts/src/main/java/io/github/benas/todolist/web/action/user/AccountAction.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 254,
                            "endLine": 254,
                            "startColumn": 17,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 617,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 10,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Java",
            "files": 36,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 14,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Python",
            "files": 2,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "JavaScript",
            "files": 6,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Java Server Pages",
            "files": 12,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}
